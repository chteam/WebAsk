
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;

namespace MWebAsk.Models
{
    /// <summary>
    /// The class representing the dbo.Reply table.
    /// </summary>
    [Table(Name="dbo.Reply")]
    public partial class Reply
        : MWebAskEntity
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Reply"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public Reply()
        {
            OnCreated();
            _question = default(EntityRef<Question>);
            _userAccount = default(EntityRef<Account>);
        }
        #endregion
        
        #region Column Mapped Properties
        
        private long _iD = default(long);

        /// <summary>
        /// Gets the ID column value.
        /// </summary>
        [Column(Name="ID", Storage="_iD", DbType="bigint NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, CanBeNull=false)]
        public long ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    OnIDChanging(value);
                    OnPropertyChanging("ID");
                    _iD = value;
                    OnPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        
        private string _body;

        /// <summary>
        /// Gets or sets the Body column value.
        /// </summary>
        [Column(Name="Body", Storage="_body", DbType="ntext NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
        public string Body
        {
            get { return _body; }
            set
            {
                if (_body != value)
                {
                    OnBodyChanging(value);
                    OnPropertyChanging("Body");
                    _body = value;
                    OnPropertyChanged("Body");
                    OnBodyChanged();
                }
            }
        }
        
        private System.DateTime _addtime;

        /// <summary>
        /// Gets or sets the Addtime column value.
        /// </summary>
        [Column(Name="Addtime", Storage="_addtime", DbType="smalldatetime NOT NULL", CanBeNull=false)]
        public System.DateTime Addtime
        {
            get { return _addtime; }
            set
            {
                if (_addtime != value)
                {
                    OnAddtimeChanging(value);
                    OnPropertyChanging("Addtime");
                    _addtime = value;
                    OnPropertyChanged("Addtime");
                    OnAddtimeChanged();
                }
            }
        }
        
        private System.DateTime _editTime;

        /// <summary>
        /// Gets or sets the EditTime column value.
        /// </summary>
        [Column(Name="EditTime", Storage="_editTime", DbType="smalldatetime NOT NULL", CanBeNull=false)]
        public System.DateTime EditTime
        {
            get { return _editTime; }
            set
            {
                if (_editTime != value)
                {
                    OnEditTimeChanging(value);
                    OnPropertyChanging("EditTime");
                    _editTime = value;
                    OnPropertyChanged("EditTime");
                    OnEditTimeChanged();
                }
            }
        }
        
        private long _questionID;

        /// <summary>
        /// Gets or sets the QuestionID column value.
        /// </summary>
        [Column(Name="QuestionID", Storage="_questionID", DbType="bigint NOT NULL", CanBeNull=false)]
        public long QuestionID
        {
            get { return _questionID; }
            set
            {
                if (_questionID != value)
                {
                    if (_question.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnQuestionIDChanging(value);
                    OnPropertyChanging("QuestionID");
                    _questionID = value;
                    OnPropertyChanged("QuestionID");
                    OnQuestionIDChanged();
                }
            }
        }
        
        private long _userID;

        /// <summary>
        /// Gets or sets the UserID column value.
        /// </summary>
        [Column(Name="UserID", Storage="_userID", DbType="bigint NOT NULL", CanBeNull=false)]
        public long UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    if (_userAccount.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnUserIDChanging(value);
                    OnPropertyChanging("UserID");
                    _userID = value;
                    OnPropertyChanged("UserID");
                    OnUserIDChanged();
                }
            }
        }
        
        private byte _situation;

        /// <summary>
        /// Gets or sets the Situation column value.
        /// </summary>
        [Column(Name="Situation", Storage="_situation", DbType="tinyint NOT NULL", CanBeNull=false)]
        public byte Situation
        {
            get { return _situation; }
            set
            {
                if (_situation != value)
                {
                    OnSituationChanging(value);
                    OnPropertyChanging("Situation");
                    _situation = value;
                    OnPropertyChanged("Situation");
                    OnSituationChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<Question> _question;

        /// <summary>
        /// Gets or sets the Question association.
        /// </summary>
        [Association(Name="FK_Reply_Question", Storage="_question", ThisKey="QuestionID", OtherKey="ID", IsForeignKey=true)]
        public Question Question
        {
            get { return _question.Entity; }
            set
            {
                Question previousValue = _question.Entity;
                if (previousValue != value || _question.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("Question");
                    if (previousValue != null)
                    {
                        _question.Entity = null;
                        previousValue.ReplyList.Remove(this);
                    }
                    _question.Entity = value;
                    if (value != null)
                    {
                        value.ReplyList.Add(this);
                        _questionID = value.ID;
                    }
                    else
                    {
                        _questionID = default(long);
                    }
                    OnPropertyChanged("Question");
                }
            }
        }
        
        private EntityRef<Account> _userAccount;

        /// <summary>
        /// Gets or sets the Account association.
        /// </summary>
        [Association(Name="FK_Reply_Account", Storage="_userAccount", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
        public Account UserAccount
        {
            get { return _userAccount.Entity; }
            set
            {
                Account previousValue = _userAccount.Entity;
                if (previousValue != value || _userAccount.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("UserAccount");
                    if (previousValue != null)
                    {
                        _userAccount.Entity = null;
                        previousValue.UserReplyList.Remove(this);
                    }
                    _userAccount.Entity = value;
                    if (value != null)
                    {
                        value.UserReplyList.Add(this);
                        _userID = value.ID;
                    }
                    else
                    {
                        _userID = default(long);
                    }
                    OnPropertyChanged("UserAccount");
                }
            }
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when ID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIDChanging(long value);
        /// <summary>Called after ID has Changed.</summary>
        partial void OnIDChanged();
        /// <summary>Called when Body is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnBodyChanging(string value);
        /// <summary>Called after Body has Changed.</summary>
        partial void OnBodyChanged();
        /// <summary>Called when Addtime is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAddtimeChanging(System.DateTime value);
        /// <summary>Called after Addtime has Changed.</summary>
        partial void OnAddtimeChanged();
        /// <summary>Called when EditTime is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnEditTimeChanging(System.DateTime value);
        /// <summary>Called after EditTime has Changed.</summary>
        partial void OnEditTimeChanged();
        /// <summary>Called when QuestionID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnQuestionIDChanging(long value);
        /// <summary>Called after QuestionID has Changed.</summary>
        partial void OnQuestionIDChanged();
        /// <summary>Called when UserID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUserIDChanging(long value);
        /// <summary>Called after UserID has Changed.</summary>
        partial void OnUserIDChanged();
        /// <summary>Called when Situation is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnSituationChanging(byte value);
        /// <summary>Called after Situation has Changed.</summary>
        partial void OnSituationChanged();
        #endregion
        
    }
}

