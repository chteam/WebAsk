
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;

namespace MWebAsk.Models
{
    /// <summary>
    /// The class representing the dbo.Category table.
    /// </summary>
    [Table(Name="dbo.Category")]
    public partial class Category
        : MWebAskEntity
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Category"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public Category()
        {
            OnCreated();
            _userAccount = default(EntityRef<Account>);
            _parentCategory = default(EntityRef<Category>);
            _parentCategoryList = new EntitySet<Category>(
                new System.Action<Category>(this.Attach_ParentCategoryList),
                new System.Action<Category>(this.Detach_ParentCategoryList));
            _questionList = new EntitySet<Question>(
                new System.Action<Question>(this.Attach_QuestionList),
                new System.Action<Question>(this.Detach_QuestionList));
        }
        #endregion
        
        #region Column Mapped Properties
        
        private long _iD = default(long);

        /// <summary>
        /// Gets the ID column value.
        /// </summary>
        [Column(Name="ID", Storage="_iD", DbType="bigint NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, CanBeNull=false)]
        public long ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    OnIDChanging(value);
                    OnPropertyChanging("ID");
                    _iD = value;
                    OnPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        
        private string _title;

        /// <summary>
        /// Gets or sets the Title column value.
        /// </summary>
        [Column(Name="Title", Storage="_title", DbType="nvarchar(50) NOT NULL", CanBeNull=false)]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    OnTitleChanging(value);
                    OnPropertyChanging("Title");
                    _title = value;
                    OnPropertyChanged("Title");
                    OnTitleChanged();
                }
            }
        }
        
        private long _userID;

        /// <summary>
        /// Gets or sets the UserID column value.
        /// </summary>
        [Column(Name="UserID", Storage="_userID", DbType="bigint NOT NULL", CanBeNull=false)]
        public long UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    if (_userAccount.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnUserIDChanging(value);
                    OnPropertyChanging("UserID");
                    _userID = value;
                    OnPropertyChanged("UserID");
                    OnUserIDChanged();
                }
            }
        }
        
        private Nullable<long> _parentID;

        /// <summary>
        /// Gets or sets the ParentID column value.
        /// </summary>
        [Column(Name="ParentID", Storage="_parentID", DbType="bigint")]
        public Nullable<long> ParentID
        {
            get { return _parentID; }
            set
            {
                if (_parentID != value)
                {
                    if (_parentCategory.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnParentIDChanging(value);
                    OnPropertyChanging("ParentID");
                    _parentID = value;
                    OnPropertyChanged("ParentID");
                    OnParentIDChanged();
                }
            }
        }
        
        private int _cOrder;

        /// <summary>
        /// Gets or sets the COrder column value.
        /// </summary>
        [Column(Name="COrder", Storage="_cOrder", DbType="int NOT NULL", CanBeNull=false)]
        public int COrder
        {
            get { return _cOrder; }
            set
            {
                if (_cOrder != value)
                {
                    OnCOrderChanging(value);
                    OnPropertyChanging("COrder");
                    _cOrder = value;
                    OnPropertyChanged("COrder");
                    OnCOrderChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<Account> _userAccount;

        /// <summary>
        /// Gets or sets the Account association.
        /// </summary>
        [Association(Name="FK_Category_Account", Storage="_userAccount", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
        public Account UserAccount
        {
            get { return _userAccount.Entity; }
            set
            {
                Account previousValue = _userAccount.Entity;
                if (previousValue != value || _userAccount.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("UserAccount");
                    if (previousValue != null)
                    {
                        _userAccount.Entity = null;
                        previousValue.UserCategoryList.Remove(this);
                    }
                    _userAccount.Entity = value;
                    if (value != null)
                    {
                        value.UserCategoryList.Add(this);
                        _userID = value.ID;
                    }
                    else
                    {
                        _userID = default(long);
                    }
                    OnPropertyChanged("UserAccount");
                }
            }
        }
        
        private EntityRef<Category> _parentCategory;

        /// <summary>
        /// Gets or sets the Category association.
        /// </summary>
        [Association(Name="FK_Category_Category", Storage="_parentCategory", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
        public Category ParentCategory
        {
            get { return _parentCategory.Entity; }
            set
            {
                Category previousValue = _parentCategory.Entity;
                if (previousValue != value || _parentCategory.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("ParentCategory");
                    if (previousValue != null)
                    {
                        _parentCategory.Entity = null;
                        previousValue.ParentCategoryList.Remove(this);
                    }
                    _parentCategory.Entity = value;
                    if (value != null)
                    {
                        value.ParentCategoryList.Add(this);
                        _parentID = value.ID;
                    }
                    else
                    {
                        _parentID = default(long);
                    }
                    OnPropertyChanged("ParentCategory");
                }
            }
        }
        
        private EntitySet<Category> _parentCategoryList;
        
        /// <summary>
        /// Gets or sets the Category association.
        /// </summary>
        [Association(Name="FK_Category_Category", Storage="_parentCategoryList", ThisKey="ID", OtherKey="ParentID")]
        public EntitySet<Category> ParentCategoryList
        {
            get { return _parentCategoryList; }
            set { _parentCategoryList.Assign(value); }
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Attach_ParentCategoryList(Category entity)
        {
            OnPropertyChanging(null);
            entity.ParentCategory = this;
            OnPropertyChanged(null);
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Detach_ParentCategoryList(Category entity)
        {
            OnPropertyChanging(null);
            entity.ParentCategory = null;
            OnPropertyChanged(null);
        }
        
        private EntitySet<Question> _questionList;
        
        /// <summary>
        /// Gets or sets the Question association.
        /// </summary>
        [Association(Name="FK_Question_Category", Storage="_questionList", ThisKey="ID", OtherKey="CategoryID")]
        public EntitySet<Question> QuestionList
        {
            get { return _questionList; }
            set { _questionList.Assign(value); }
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Attach_QuestionList(Question entity)
        {
            OnPropertyChanging(null);
            entity.Category = this;
            OnPropertyChanged(null);
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Detach_QuestionList(Question entity)
        {
            OnPropertyChanging(null);
            entity.Category = null;
            OnPropertyChanged(null);
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when ID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIDChanging(long value);
        /// <summary>Called after ID has Changed.</summary>
        partial void OnIDChanged();
        /// <summary>Called when Title is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnTitleChanging(string value);
        /// <summary>Called after Title has Changed.</summary>
        partial void OnTitleChanged();
        /// <summary>Called when UserID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUserIDChanging(long value);
        /// <summary>Called after UserID has Changed.</summary>
        partial void OnUserIDChanged();
        /// <summary>Called when ParentID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnParentIDChanging(Nullable<long> value);
        /// <summary>Called after ParentID has Changed.</summary>
        partial void OnParentIDChanged();
        /// <summary>Called when COrder is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCOrderChanging(int value);
        /// <summary>Called after COrder has Changed.</summary>
        partial void OnCOrderChanged();
        #endregion
        
    }
}

