
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;

namespace MWebAsk.Models
{
    /// <summary>
    /// The class representing the dbo.Account table.
    /// </summary>
    [Table(Name="dbo.Account")]
    public partial class Account
        : MWebAskEntity
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Account"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public Account()
        {
            OnCreated();
            _userCategoryList = new EntitySet<Category>(
                new System.Action<Category>(this.Attach_UserCategoryList),
                new System.Action<Category>(this.Detach_UserCategoryList));
            _userPublishList = new EntitySet<Publish>(
                new System.Action<Publish>(this.Attach_UserPublishList),
                new System.Action<Publish>(this.Detach_UserPublishList));
            _userQuestionList = new EntitySet<Question>(
                new System.Action<Question>(this.Attach_UserQuestionList),
                new System.Action<Question>(this.Detach_UserQuestionList));
            _userReplyList = new EntitySet<Reply>(
                new System.Action<Reply>(this.Attach_UserReplyList),
                new System.Action<Reply>(this.Detach_UserReplyList));
        }
        #endregion
        
        #region Column Mapped Properties
        
        private long _iD = default(long);

        /// <summary>
        /// Gets the ID column value.
        /// </summary>
        [Column(Name="ID", Storage="_iD", DbType="bigint NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, CanBeNull=false)]
        public long ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    OnIDChanging(value);
                    OnPropertyChanging("ID");
                    _iD = value;
                    OnPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        
        private string _email;

        /// <summary>
        /// Gets or sets the Email column value.
        /// </summary>
        [Column(Name="Email", Storage="_email", DbType="nvarchar(50) NOT NULL", CanBeNull=false)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    OnEmailChanging(value);
                    OnPropertyChanging("Email");
                    _email = value;
                    OnPropertyChanged("Email");
                    OnEmailChanged();
                }
            }
        }
        
        private string _password;

        /// <summary>
        /// Gets or sets the Password column value.
        /// </summary>
        [Column(Name="Password", Storage="_password", DbType="varchar(32) NOT NULL", CanBeNull=false)]
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    OnPasswordChanging(value);
                    OnPropertyChanging("Password");
                    _password = value;
                    OnPropertyChanged("Password");
                    OnPasswordChanged();
                }
            }
        }
        
        private byte _statusLevel;

        /// <summary>
        /// Gets or sets the StatusLevel column value.
        /// </summary>
        [Column(Name="StatusLevel", Storage="_statusLevel", DbType="tinyint NOT NULL", CanBeNull=false)]
        public byte StatusLevel
        {
            get { return _statusLevel; }
            set
            {
                if (_statusLevel != value)
                {
                    OnStatusLevelChanging(value);
                    OnPropertyChanging("StatusLevel");
                    _statusLevel = value;
                    OnPropertyChanged("StatusLevel");
                    OnStatusLevelChanged();
                }
            }
        }
        
        private int _point;

        /// <summary>
        /// Gets or sets the Point column value.
        /// </summary>
        [Column(Name="Point", Storage="_point", DbType="int NOT NULL", CanBeNull=false)]
        public int Point
        {
            get { return _point; }
            set
            {
                if (_point != value)
                {
                    OnPointChanging(value);
                    OnPropertyChanging("Point");
                    _point = value;
                    OnPropertyChanged("Point");
                    OnPointChanged();
                }
            }
        }
        
        private string _nickName;

        /// <summary>
        /// Gets or sets the NickName column value.
        /// </summary>
        [Column(Name="NickName", Storage="_nickName", DbType="nvarchar(50) NOT NULL", CanBeNull=false)]
        public string NickName
        {
            get { return _nickName; }
            set
            {
                if (_nickName != value)
                {
                    OnNickNameChanging(value);
                    OnPropertyChanging("NickName");
                    _nickName = value;
                    OnPropertyChanged("NickName");
                    OnNickNameChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntitySet<Category> _userCategoryList;
        
        /// <summary>
        /// Gets or sets the Category association.
        /// </summary>
        [Association(Name="FK_Category_Account", Storage="_userCategoryList", ThisKey="ID", OtherKey="UserID")]
        public EntitySet<Category> UserCategoryList
        {
            get { return _userCategoryList; }
            set { _userCategoryList.Assign(value); }
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Attach_UserCategoryList(Category entity)
        {
            OnPropertyChanging(null);
            entity.UserAccount = this;
            OnPropertyChanged(null);
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Detach_UserCategoryList(Category entity)
        {
            OnPropertyChanging(null);
            entity.UserAccount = null;
            OnPropertyChanged(null);
        }
        
        private EntitySet<Publish> _userPublishList;
        
        /// <summary>
        /// Gets or sets the Publish association.
        /// </summary>
        [Association(Name="FK_Publish_Account", Storage="_userPublishList", ThisKey="ID", OtherKey="UserID")]
        public EntitySet<Publish> UserPublishList
        {
            get { return _userPublishList; }
            set { _userPublishList.Assign(value); }
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Attach_UserPublishList(Publish entity)
        {
            OnPropertyChanging(null);
            entity.UserAccount = this;
            OnPropertyChanged(null);
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Detach_UserPublishList(Publish entity)
        {
            OnPropertyChanging(null);
            entity.UserAccount = null;
            OnPropertyChanged(null);
        }
        
        private EntitySet<Question> _userQuestionList;
        
        /// <summary>
        /// Gets or sets the Question association.
        /// </summary>
        [Association(Name="FK_Question_Account", Storage="_userQuestionList", ThisKey="ID", OtherKey="UserID")]
        public EntitySet<Question> UserQuestionList
        {
            get { return _userQuestionList; }
            set { _userQuestionList.Assign(value); }
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Attach_UserQuestionList(Question entity)
        {
            OnPropertyChanging(null);
            entity.UserAccount = this;
            OnPropertyChanged(null);
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Detach_UserQuestionList(Question entity)
        {
            OnPropertyChanging(null);
            entity.UserAccount = null;
            OnPropertyChanged(null);
        }
        
        private EntitySet<Reply> _userReplyList;
        
        /// <summary>
        /// Gets or sets the Reply association.
        /// </summary>
        [Association(Name="FK_Reply_Account", Storage="_userReplyList", ThisKey="ID", OtherKey="UserID")]
        public EntitySet<Reply> UserReplyList
        {
            get { return _userReplyList; }
            set { _userReplyList.Assign(value); }
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Attach_UserReplyList(Reply entity)
        {
            OnPropertyChanging(null);
            entity.UserAccount = this;
            OnPropertyChanged(null);
        }
        
        [DebuggerNonUserCodeAttribute()]
        private void Detach_UserReplyList(Reply entity)
        {
            OnPropertyChanging(null);
            entity.UserAccount = null;
            OnPropertyChanged(null);
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when ID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIDChanging(long value);
        /// <summary>Called after ID has Changed.</summary>
        partial void OnIDChanged();
        /// <summary>Called when Email is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnEmailChanging(string value);
        /// <summary>Called after Email has Changed.</summary>
        partial void OnEmailChanged();
        /// <summary>Called when Password is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnPasswordChanging(string value);
        /// <summary>Called after Password has Changed.</summary>
        partial void OnPasswordChanged();
        /// <summary>Called when StatusLevel is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnStatusLevelChanging(byte value);
        /// <summary>Called after StatusLevel has Changed.</summary>
        partial void OnStatusLevelChanged();
        /// <summary>Called when Point is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnPointChanging(int value);
        /// <summary>Called after Point has Changed.</summary>
        partial void OnPointChanged();
        /// <summary>Called when NickName is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnNickNameChanging(string value);
        /// <summary>Called after NickName has Changed.</summary>
        partial void OnNickNameChanged();
        #endregion
        
    }
}

