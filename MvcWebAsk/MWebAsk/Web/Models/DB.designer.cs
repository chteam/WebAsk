#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1433
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MWebAsk.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="WebAsk")]
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertPublish(Publish instance);
    partial void UpdatePublish(Publish instance);
    partial void DeletePublish(Publish instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertReply(Reply instance);
    partial void UpdateReply(Reply instance);
    partial void DeleteReply(Reply instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    #endregion
		
		public DBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WebAskConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Category
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Publish> Publish
		{
			get
			{
				return this.GetTable<Publish>();
			}
		}
		
		public System.Data.Linq.Table<Question> Question
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Reply> Reply
		{
			get
			{
				return this.GetTable<Reply>();
			}
		}
		
		public System.Data.Linq.Table<Account> Account
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
	}
	
	[Table(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Title;
		
		private long _UserID;
		
		private long _ParentID;
		
		private EntitySet<Question> _Question;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnParentIDChanging(long value);
    partial void OnParentIDChanged();
    #endregion
		
		public Category()
		{
			this._Question = new EntitySet<Question>(new Action<Question>(this.attach_Question), new Action<Question>(this.detach_Question));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="BigInt NOT NULL")]
		public long ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Association(Name="Category_Question", Storage="_Question", OtherKey="CategoryID")]
		public EntitySet<Question> Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				this._Question.Assign(value);
			}
		}
		
		[Association(Name="Account_Category", Storage="_Account", ThisKey="UserID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Category.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Category.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Question(Question entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Question(Question entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.Publish")]
	public partial class Publish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Title;
		
		private string _Body;
		
		private System.DateTime _Addtime;
		
		private long _UserID;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnAddtimeChanging(System.DateTime value);
    partial void OnAddtimeChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    #endregion
		
		public Publish()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_Addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Addtime
		{
			get
			{
				return this._Addtime;
			}
			set
			{
				if ((this._Addtime != value))
				{
					this.OnAddtimeChanging(value);
					this.SendPropertyChanging();
					this._Addtime = value;
					this.SendPropertyChanged("Addtime");
					this.OnAddtimeChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Association(Name="Account_Publish", Storage="_Account", ThisKey="UserID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Publish.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Publish.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Title;
		
		private string _Body;
		
		private System.DateTime _Addtime;
		
		private System.DateTime _Edittime;
		
		private long _UserID;
		
		private long _CategoryID;
		
		private EntitySet<Reply> _Reply;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnAddtimeChanging(System.DateTime value);
    partial void OnAddtimeChanged();
    partial void OnEdittimeChanging(System.DateTime value);
    partial void OnEdittimeChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnCategoryIDChanging(long value);
    partial void OnCategoryIDChanged();
    #endregion
		
		public Question()
		{
			this._Reply = new EntitySet<Reply>(new Action<Reply>(this.attach_Reply), new Action<Reply>(this.detach_Reply));
			this._Category = default(EntityRef<Category>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_Addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Addtime
		{
			get
			{
				return this._Addtime;
			}
			set
			{
				if ((this._Addtime != value))
				{
					this.OnAddtimeChanging(value);
					this.SendPropertyChanging();
					this._Addtime = value;
					this.SendPropertyChanged("Addtime");
					this.OnAddtimeChanged();
				}
			}
		}
		
		[Column(Storage="_Edittime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Edittime
		{
			get
			{
				return this._Edittime;
			}
			set
			{
				if ((this._Edittime != value))
				{
					this.OnEdittimeChanging(value);
					this.SendPropertyChanging();
					this._Edittime = value;
					this.SendPropertyChanged("Edittime");
					this.OnEdittimeChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryID", DbType="BigInt NOT NULL")]
		public long CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Association(Name="Question_Reply", Storage="_Reply", OtherKey="QuestionID")]
		public EntitySet<Reply> Reply
		{
			get
			{
				return this._Reply;
			}
			set
			{
				this._Reply.Assign(value);
			}
		}
		
		[Association(Name="Category_Question", Storage="_Category", ThisKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Question.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Question.Add(this);
						this._CategoryID = value.ID;
					}
					else
					{
						this._CategoryID = default(long);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="Account_Question", Storage="_Account", ThisKey="UserID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Question.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Question.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reply(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Reply(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[Table(Name="dbo.Reply")]
	public partial class Reply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Body;
		
		private System.DateTime _Addtime;
		
		private System.DateTime _EditTime;
		
		private long _QuestionID;
		
		private string _Type;
		
		private long _UserID;
		
		private byte _Situation;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnAddtimeChanging(System.DateTime value);
    partial void OnAddtimeChanged();
    partial void OnEditTimeChanging(System.DateTime value);
    partial void OnEditTimeChanged();
    partial void OnQuestionIDChanging(long value);
    partial void OnQuestionIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnSituationChanging(byte value);
    partial void OnSituationChanged();
    #endregion
		
		public Reply()
		{
			this._Question = default(EntityRef<Question>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_Addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Addtime
		{
			get
			{
				return this._Addtime;
			}
			set
			{
				if ((this._Addtime != value))
				{
					this.OnAddtimeChanging(value);
					this.SendPropertyChanging();
					this._Addtime = value;
					this.SendPropertyChanged("Addtime");
					this.OnAddtimeChanged();
				}
			}
		}
		
		[Column(Storage="_EditTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime EditTime
		{
			get
			{
				return this._EditTime;
			}
			set
			{
				if ((this._EditTime != value))
				{
					this.OnEditTimeChanging(value);
					this.SendPropertyChanging();
					this._EditTime = value;
					this.SendPropertyChanged("EditTime");
					this.OnEditTimeChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionID", DbType="BigInt NOT NULL")]
		public long QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Situation", DbType="TinyInt NOT NULL")]
		public byte Situation
		{
			get
			{
				return this._Situation;
			}
			set
			{
				if ((this._Situation != value))
				{
					this.OnSituationChanging(value);
					this.SendPropertyChanging();
					this._Situation = value;
					this.SendPropertyChanged("Situation");
					this.OnSituationChanged();
				}
			}
		}
		
		[Association(Name="Question_Reply", Storage="_Question", ThisKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Reply.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Reply.Add(this);
						this._QuestionID = value.ID;
					}
					else
					{
						this._QuestionID = default(long);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[Association(Name="Account_Reply", Storage="_Account", ThisKey="UserID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Reply.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Reply.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Email;
		
		private string _Password;
		
		private byte _StatusLevel;
		
		private int _Point;
		
		private EntitySet<Category> _Category;
		
		private EntitySet<Publish> _Publish;
		
		private EntitySet<Question> _Question;
		
		private EntitySet<Reply> _Reply;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnStatusLevelChanging(byte value);
    partial void OnStatusLevelChanged();
    partial void OnPointChanging(int value);
    partial void OnPointChanged();
    #endregion
		
		public Account()
		{
			this._Category = new EntitySet<Category>(new Action<Category>(this.attach_Category), new Action<Category>(this.detach_Category));
			this._Publish = new EntitySet<Publish>(new Action<Publish>(this.attach_Publish), new Action<Publish>(this.detach_Publish));
			this._Question = new EntitySet<Question>(new Action<Question>(this.attach_Question), new Action<Question>(this.detach_Question));
			this._Reply = new EntitySet<Reply>(new Action<Reply>(this.attach_Reply), new Action<Reply>(this.detach_Reply));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_StatusLevel", DbType="TinyInt NOT NULL")]
		public byte StatusLevel
		{
			get
			{
				return this._StatusLevel;
			}
			set
			{
				if ((this._StatusLevel != value))
				{
					this.OnStatusLevelChanging(value);
					this.SendPropertyChanging();
					this._StatusLevel = value;
					this.SendPropertyChanged("StatusLevel");
					this.OnStatusLevelChanged();
				}
			}
		}
		
		[Column(Storage="_Point", DbType="Int NOT NULL")]
		public int Point
		{
			get
			{
				return this._Point;
			}
			set
			{
				if ((this._Point != value))
				{
					this.OnPointChanging(value);
					this.SendPropertyChanging();
					this._Point = value;
					this.SendPropertyChanged("Point");
					this.OnPointChanged();
				}
			}
		}
		
		[Association(Name="Account_Category", Storage="_Category", OtherKey="UserID")]
		public EntitySet<Category> Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				this._Category.Assign(value);
			}
		}
		
		[Association(Name="Account_Publish", Storage="_Publish", OtherKey="UserID")]
		public EntitySet<Publish> Publish
		{
			get
			{
				return this._Publish;
			}
			set
			{
				this._Publish.Assign(value);
			}
		}
		
		[Association(Name="Account_Question", Storage="_Question", OtherKey="UserID")]
		public EntitySet<Question> Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				this._Question.Assign(value);
			}
		}
		
		[Association(Name="Account_Reply", Storage="_Reply", OtherKey="UserID")]
		public EntitySet<Reply> Reply
		{
			get
			{
				return this._Reply;
			}
			set
			{
				this._Reply.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Category(Category entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Category(Category entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Publish(Publish entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Publish(Publish entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Question(Question entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Question(Question entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Reply(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Reply(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
}
#pragma warning restore 1591
